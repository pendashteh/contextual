#!/usr/bin/env bash

__datadir=$HOME/.contextual

__context=${__context:-'main'}

timeline__=

__puton__ () {
  mkdir -p $__datadir/contexts
  timeline__=$__datadir/timeline
}

__sourced () {
  [[ "${BASH_SOURCE[0]}" != "${0}" ]]
}

switch__help='asks for the context and __domain and invokes set__'
switch__ () {
  ! __sourced && echo 'please source: $ source [cmd]' && return
  read -p 'context name? [default: '$__context'] ' context
  set__ ${context:-$__context}
}

set__help='@arg context @does set history and pwd for as per the given context.'
set__ () {
  __context=${1:-$__context}
  shopt -s histappend
  export CONTEXT_PATH=$__datadir/contexts/$__context
  mkdir -p $CONTEXT_PATH
  export HISTFILE=$CONTEXT_PATH/bash_history
  local paths_file=$CONTEXT_PATH/pwd
  test -f $paths_file && {
    cd $(tail -n1 $paths_file)
  }
  export _ps1_pre_context=${_ps1_pre_context:-$PS1}
  export PS1="[$(basename $CONTEXT_PATH)] $_ps1_pre_context"

  # create notes
  touch $CONTEXT_PATH/notes

  local command=$(get__ 'command')
  if [[ -n $command ]]; then
    __exec $command
  fi

  # add to timeline
  printf '%s\t%s\n' "$(date)" $CONTEXT_PATH >> $timeline__

  # sets the title for tmux panes
  : 'https://stackoverflow.com/a/9757133/257479'
  printf '\033]2;%s\033\\' "context: $__context"
}

timeline__ () {
  cat $timeline__
}

notes__help='@does open notes for this context'
notes__ () {
  ${EDITOR:-vim} $CONTEXT_PATH/notes
}

recent__help='@does list recent contexts from the newsest first'
recent__ () {
  timeline__ | cut -d$'\t' -f2 | xargs -I {} basename {} | awk '!x[$0]++' | tac
}

get__ () {
  : 'get info about the context'

  local info=${1:-'path'}
  case $info in
    'command')
      touch $CONTEXT_PATH/command
      cat $CONTEXT_PATH/command
      ;;
    'path')
      echo $CONTEXT_PATH
      ;;
  esac
}

list__help='@does list domains or contexts under the set domain.'
list__ () {
 ls $__datadir/${__domain}
}

domains__help='@does list all domains.'
domains__ () {
 ls $__datadir 
}

tree__help='@does print a tree of all contexts under their domain'
tree__ () {
 tree -d $__datadir
}

dirs__help='@does list dirs visited in this context.'
dirs__ () {
  cat $CONTEXT_PATH/pwd | uniq | sort | tee $CONTEXT_PATH/pwd
}

which__help='@arg dir @does list contexts in which dir exists'
which__ () {
  local path=$(realpath ${1:-$(pwd)})
  find $__datadir -name pwd -exec grep $path -H {} \; | sed "s|$__datadir\/\(.*\)\/pwd.*|\1|" | uniq
}

info__help='@does provide info on current context'
info__ () {
  find $CONTEXT_PATH -type f
}

source undies3
